name: Deduplicator Build & Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  lint_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Run cargo check
        run: cargo check

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test -- --test-threads=1

  build:
    needs: lint_test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: linux-aarch64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: linux-amd64
          - target: x86_64-apple-darwin
            os: macos-14
            artifact_name: macos-amd64
          - target: aarch64-apple-darwin
            os: macos-14
            artifact_name: macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          BINARY_NAME=$(basename $(find target/${{ matrix.target }}/release -maxdepth 1 -type f -executable | head -1))
          mkdir -p release
          cp target/${{ matrix.target }}/release/$BINARY_NAME release/$BINARY_NAME
          tar -C release -czf ${{ matrix.artifact_name }}.tar.gz $BINARY_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}-binary
          path: ${{ matrix.artifact_name }}.tar.gz

  create_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.artifact_name }}-binary/${{ matrix.artifact_name }}.tar.gz
          asset_name: ${{ matrix.artifact_name }}.tar.gz
          asset_content_type: application/gzip
